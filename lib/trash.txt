import React, { useEffect, useState } from 'react';
import { View, Text, Button } from 'react-native';
import PDFLib, { PDFDocument, PDFPage } from 'react-native-pdf';
import firestore from '@react-native-firebase/firestore';
import RNFS from 'react-native-fs';

const GenerateList = () => {
    const [pdfUri, setPdfUri] = useState('');

    useEffect(() => {
        const generatePDF = async () => {
            try {
                const collectionRef = firestore().collection('Checking');
                const querySnapshot = await collectionRef.get();

                const pdfDoc = PDFDocument.create();

                querySnapshot.forEach((doc) => {
                    const page = PDFPage.create();
                    page.drawText(doc.data().your_field);
                    pdfDoc.addPage(page);
                });

                const pdfBytes = await pdfDoc.write();
                const pdfPath = `${RNFS.DocumentDirectoryPath}/your_file.pdf`;

                await RNFS.writeFile(pdfPath, pdfBytes, 'base64');
                setPdfUri(pdfPath);

                console.log('PDF generated successfully!');
            } catch (error) {
                console.error('Error generating PDF:', error);
            }
        };

        generatePDF();
    }, []);

    return (
        <View>
            <Text>Generated PDF: {pdfUri}</Text>
            <Button title="Download PDF" onPress={() => { /* Handle PDF download */ }} />
        </View>
    );
};

export default GenerateList;



import React, { useEffect, useState } from 'react';
import { View, Text, Button } from 'react-native';
import RNFS from 'react-native-fs';
import firestore from '@react-native-firebase/firestore';
import PDFView from 'react-native-view-pdf'; // Add this import statement

const Test2 = () => {
    const [data, setData] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const collectionRef = firestore().collection('Checking');
                const snapshot = await collectionRef.get();
                const documents = snapshot.docs.map(doc => doc.data());
                setData(documents);
                setLoading(false);
            } catch (error) {
                console.error('Error fetching data from Firestore: ', error);
            }
        };

        fetchData();
    }, []);

    const generatePdf = async () => {
        const pdfPath = RNFS.DocumentDirectoryPath + '/output.pdf';

        const pdfData = data
            .map((item, index) => `${index + 1}. ${JSON.stringify(item)}\n`)
            .join('');

        try {
            await RNFS.writeFile(pdfPath, pdfData, 'utf8');
            console.log('PDF file created successfully:', pdfPath);
        } catch (error) {
            console.error('Error creating PDF file:', error);
        }
    };

    if (loading) {
        return <Text>Loading...</Text>;
    }

    return (
        <View>
            <Button title="Generate PDF" onPress={generatePdf} />
            <PDFView
                fadeInDuration={250.0}
                style={{ flex: 1 }}
                resource={'file://' + RNFS.DocumentDirectoryPath + '/output.pdf'}
                onLoadComplete={(numberOfPages, filePath) => {
                    console.log(`number of pages: ${numberOfPages}`);
                }}
                onPageChanged={(page, numberOfPages) => {
                    console.log(`current page: ${page}`);
                }}
                onError={error => {
                    console.error('Error loading PDF:', error);
                }}
            />
        </View>
    );
};

export default Test2;
